<?php

namespace Duardaum\LaravelRepository\Tests\Feature;

use Duardaum\LaravelRepository\Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Duardaum\LaravelRepository\Contracts\Repositories\MessageRepositoryInterface;

class BaseRepositoryTest extends TestCase
{

    use RefreshDatabase;

    protected MessageRepositoryInterface $_repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_repository = app(MessageRepositoryInterface::class);
    }

    public function test_get_table_name_method()
    {
        $this->assertEquals(app(\Duardaum\LaravelRepository\Models\Message::class)->getTable(), $this->_repository->getTableName());
    }

    public function test_create_method()
    {
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $this->_repository->create(['content' => 'Test']));
        $this->assertDatabaseCount(\Duardaum\LaravelRepository\Models\Message::class, 1);
    }

    public function test_create_many_method()
    {
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->assertTrue($this->_repository->createMany($inserts));
        $this->assertDatabaseCount(\Duardaum\LaravelRepository\Models\Message::class, 2);
    }

    public function test_update_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $updated = $this->_repository->update(['content' => 'Test 3'], 2);

        //Assert
        $this->assertEquals(1, $updated);
        $this->assertDatabaseHas(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 3']);
    }

    public function test_update_or_create_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
            //Creating
        $created = $this->_repository->updateOrCreate(['content' => 'Test 4'], ['content' => 'Test 5']);
            //Updating
        $updated = $this->_repository->updateOrCreate(['content' => 'Test 10'], ['content' => 'Test 2']);

        //Assert
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $created);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $updated);
        $this->assertDatabaseHas(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 4']);
        $this->assertDatabaseHas(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 10']);
        $this->assertDatabaseCount(\Duardaum\LaravelRepository\Models\Message::class, 4);
    }

    public function test_delete_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $single = $this->_repository->delete(1);
        $multi = $this->_repository->delete([2, 3]);

        //Assert
        $this->assertEquals(1, $single);
        $this->assertEquals(2, $multi);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 1']);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 2']);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 3']);
    }

    public function test_delete_where_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $multi = $this->_repository->deleteWhere(['created_at', '=', now()]);

        //Assert
        $this->assertEquals(3, $multi);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 1']);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 2']);
        $this->assertSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 3']);
    }

    public function test_force_delete_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);
        $this->_repository->deleteWhere(['created_at', '=', now()]);

        //Act
        $single = $this->_repository->forceDelete(1);
        $multi = $this->_repository->forceDelete([2, 3]);

        //Assert
        $this->assertEquals(1, $single);
        $this->assertEquals(2, $multi);
        $this->assertDatabaseCount(\Duardaum\LaravelRepository\Models\Message::class, 0);
    }

    public function test_force_delete_where_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);
        $this->_repository->deleteWhere(['created_at', '=', now()]);

        //Act
        $multi = $this->_repository->forceDeleteWhere(['created_at', '=', now()]);

        //Assert
        $this->assertEquals(3, $multi);
        $this->assertDatabaseCount(\Duardaum\LaravelRepository\Models\Message::class, 0);
    }

    public function test_restore_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);
        $this->_repository->deleteWhere(['created_at', '=', now()]);

        //Act
        $single = $this->_repository->restore(1);
        $multi = $this->_repository->restore([2, 3]);

        //Assert
        $this->assertEquals(1, $single);
        $this->assertEquals(2, $multi);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 1']);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 2']);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 3']);
    }

    public function test_restore_where_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);
        $this->_repository->deleteWhere(['created_at', '=', now()]);

        //Act
        $multi = $this->_repository->restoreWhere(['created_at', '=', now()]);

        //Assert
        $this->assertEquals(3, $multi);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 1']);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 2']);
        $this->assertNotSoftDeleted(\Duardaum\LaravelRepository\Models\Message::class, ['content' => 'Test 3']);
    }

    public function test_all_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $collection = $this->_repository->all();

        //Assert
        $this->assertInstanceOf(\Illuminate\Database\Eloquent\Collection::class, $collection);
        $this->assertCount(3, $collection);
    }

    public function test_find_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $model = $this->_repository->find(1);
        $model2 = $this->_repository->find(2);
        $nullable = $this->_repository->find(10);

        //Assert
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model2);
        $this->assertNull($nullable);
    }

    public function test_find_first_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $model = $this->_repository->findFirst(['content', '=', 'Test 3']);
        $where = [
            ['content', '=', 'Test 1'],
            ['created_at', '=', now()],
        ];
        $model2 = $this->_repository->findFirst($where);
        $nullable = $this->_repository->findFirst(['content', '=', 'Test 10']);

        //Assert
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model);
        $this->assertEquals('Test 3', $model->content);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model2);
        $this->assertEquals('Test 1', $model2->content);
        $this->assertNull($nullable);
    }

    public function test_find_by_field_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $collection = $this->_repository->findByField('created_at', now());

        //Assert
        $this->assertCount(3, $collection);

    }

    public function test_find_where_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = [
            ['content', '<>', 'Test 1'],
            ['created_at', '>', now()->subDay()],
        ];
        $collection = $this->_repository->findWhere($where);
        $where = ['content', '<>', 'Test 1'];
        $collection2 = $this->_repository->findWhere($where);

        //Assert
        $this->assertCount(2, $collection);
        $this->assertCount(2, $collection2);

    }

    public function test_find_where_limit_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = ['created_at', '=', now()];
        $collection = $this->_repository->findWhereLimit($where, 1);

        //Assert
        $this->assertCount(1, $collection);
    }

    public function test_find_where_in_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $in = ['Test 1', 'Test 2'];
        $collection = $this->_repository->findWhereIn('content', $in);

        //Assert
        $this->assertCount(2, $collection);
    }

    public function test_find_where_not_in_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $not_in = ['Test 1'];
        $collection = $this->_repository->findWhereNotIn('content', $not_in);

        //Assert
        $this->assertCount(2, $collection);
    }

    public function test_find_where_between_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $between = [now()->subDay(), now()->addDay()];
        $collection = $this->_repository->findWhereBetween('created_at', $between);

        //Assert
        $this->assertCount(3, $collection);
    }

    public function test_find_where_not_between_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $not_between = [now()->subDay(), now()->addDay()];
        $collection = $this->_repository->findWhereNotBetween('created_at', $not_between);

        //Assert
        $this->assertCount(0, $collection);
    }

    public function test_find_order_by_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = ['created_at', '=', now()];
        $collection = $this->_repository->findOrderBy($where, 'content', 'desc');
        $data = $collection->toArray();

        //Assert
        $this->assertCount(3, $data);
        $this->assertEquals('Test 3', $data[0]['content']);
        $this->assertEquals('Test 2', $data[1]['content']);
        $this->assertEquals('Test 1', $data[2]['content']);
    }

    public function test_find_order_by_first_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = ['created_at', '=', now()];
        $model = $this->_repository->findOrderByFirst($where, 'content', 'desc');

        //Assert
        $this->assertNotNull($model);
        $this->assertEquals('Test 3', $model->content);
    }

    public function test_find_where_paginate_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = ['created_at', '=', now()];
        $pagination = $this->_repository->findWherePaginate($where, 1);


        //Assert
        $this->assertTrue($pagination->hasPages());
        $this->assertEquals(3, $pagination->total());
        $this->assertEquals(1, $pagination->perPage());
    }

    public function test_paginate_method()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $where = ['created_at', '=', now()];
        $pagination = $this->_repository->paginate(1);

        //Assert
        $this->assertTrue($pagination->hasPages());
        $this->assertEquals(3, $pagination->total());
        $this->assertEquals(1, $pagination->perPage());
    }

    public function test_looking_in_trash_for_data()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $this->_repository->deleteWhere(['created_at', '=', now()]);
        $model = $this->_repository->onlyTrashed()->findFirst(['content', '=', 'Test 1']);

        //Assert
        $this->assertNotNull($model);
        $this->assertSoftDeleted($model);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model);
        $this->assertEquals($model->content, 'Test 1');
    }

    public function test_looking_in_and_out_of_trash_for_data()
    {
        //prepare
        $inserts = [
            ['content' => 'Test 1', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 2', 'created_at' => now(), 'updated_at' => now()],
            ['content' => 'Test 3', 'created_at' => now(), 'updated_at' => now()],
        ];
        $this->_repository->createMany($inserts);

        //Act
        $this->_repository->deleteWhere(['content', '=', 'Test 1']);
        $model = $this->_repository->withTrashed()->findFirst(['content', '=', 'Test 2']);
        $model2 = $this->_repository->findFirst(['content', '=', 'Test 1']);

        //Assert
        $this->assertNotNull($model);
        $this->assertNotNull($model2);
        $this->assertNotSoftDeleted($model);
        $this->assertSoftDeleted($model2);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model);
        $this->assertInstanceOf(\Duardaum\LaravelRepository\Models\Message::class, $model2);
        $this->assertEquals($model->content, 'Test 2');
        $this->assertEquals($model2->content, 'Test 1');
    }

}